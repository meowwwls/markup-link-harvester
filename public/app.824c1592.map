{"version":3,"sources":["harvester.js","domcache.js","domhelpers.js","tabs.js","fileupload.js","app.js"],"names":["getHarvest","linkPattern","emailPattern","getMatches","input","pattern","matches","match","exec","includes","push","findIndex","item","toLowerCase","getLinks","rawLinks","map","link","email","noMarkupMsg","tabsList","document","getElementById","markupTab","markupContent","form","textArea","uploadBtn","uploadInput","fileNameOutput","validateBtn","resultsTab","resultsContent","noMarkupHeader","linksHeader","emailHeader","linksOutput","emailsOutput","toggleClasses","els","toggleClass","forEach","el","classList","toggle","switchTab","currentTab","currentContent","setInitialState","tabs","content","setAttribute","tab","i","index","parentNode","id","add","hidden","addEventListener","hash","e","currentTarget","preventDefault","location","key","focus","toggleTabA11y","newTab","newContent","removeAttribute","hasAttribute","args","handleFileInput","readFile","file","callback","reader","FileReader","onload","readAsText","setTextareaContent","name","target","value","result","innerHTML","createEmailMarkup","emailMatches","join","createLinkMarkup","linkMatches","text","url","displayMatches","links","length","resetForm","msgs","createHeaderMsgs","textContent","window","click","files","reset","emails","noMk","updateResultsHeaders","harvest","trim","headerMsgs"],"mappings":"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","file":"app.824c1592.map","sourceRoot":"../src","sourcesContent":["// matches external links in markup and their link text, if any\nconst linkPattern = /(?:href=['\"])(http[s]?:\\/\\/(?:w{3}.)?[^-]?(?:[a-z\\d-]{2,67})\\.[a-z]{2,}(?:\\.\\w{2,})?[^\"']*)([\"'][^>]*>)([^<]+(?=<\\/a>))/gi;\n// matches email addresses linked to in markup\nconst emailPattern = /\\b(?:mailto:)?([^@\\.\"'><]+@[a-z0-9]{2,67}\\.[a-z]{2,}(\\.[a-z]{2,})?)\\b/gi;\n\n// returns an array of matches or an empty array\nconst getMatches = (input, pattern) => {\n  if (typeof input !== 'string' || !pattern) return [];\n\n  const matches = [];\n  let match;\n\n  while ((match = pattern.exec(input)) !== null) {\n    if (pattern === emailPattern) {\n      if (!matches.includes(match[1])) {\n        matches.push(match[1]);\n      }\n    } else {\n      // filter out duplicate links and text (duplicate URLS are fine but not with the same text)\n      if (\n        matches.findIndex(\n          item =>\n            item[1].toLowerCase() === match[1].toLowerCase() &&\n            item[3].toLowerCase() === match[3].toLowerCase()\n        ) === -1\n      ) {\n        matches.push(match);\n      }\n    }\n  }\n\n  return matches;\n};\n\nconst getLinks = input => {\n  const rawLinks = getMatches(input, linkPattern);\n\n  return rawLinks.map(link => ({\n    url: link[1],\n    text: link[3] || ''\n  }));\n};\n\nconst getHarvest = input => {\n  const links = getLinks(input);\n  const email = getMatches(input, emailPattern);\n\n  return {\n    links,\n    email\n  };\n};\n\nexport default getHarvest;\n","const tabsList = document.getElementById('tabslist');\n\n// markup\nconst markupTab = document.getElementById('markup-tab');\nconst markupContent = document.getElementById('markup');\nconst form = document.getElementById('markup-form');\nconst textArea = document.getElementById('markup-input');\nconst uploadBtn = document.getElementById('upload-label');\nconst uploadInput = document.getElementById('markup-upload');\nconst fileNameOutput = document.getElementById('current-file');\nconst validateBtn = document.getElementById('harvest');\n\n// results\nconst resultsTab = document.getElementById('results-tab');\nconst resultsContent = document.getElementById('results');\nconst noMarkupHeader = document.getElementById('nomarkup-h');\nconst linksHeader = document.getElementById('links-h');\nconst emailHeader = document.getElementById('email-h');\n\nconst linksOutput = document.getElementById('links');\nconst emailsOutput = document.getElementById('emails');\n\nconst noMarkupMsg = document.getElementById('nomarkup-msg');\n\nexport {\n  tabsList,\n  markupTab,\n  markupContent,\n  resultsTab,\n  resultsContent,\n  form,\n  textArea,\n  uploadBtn,\n  fileNameOutput,\n  uploadInput,\n  validateBtn,\n  linksOutput,\n  emailsOutput,\n  linksHeader,\n  emailHeader,\n  noMarkupHeader,\n  noMarkupMsg\n};\n","const toggleClasses = (els, toggleClass) => {\n  els.forEach(el => el.classList.toggle(toggleClass));\n};\n\nexport { toggleClasses };\n","// need to import els from dom: tabs and tab content\nimport {\n  tabsList,\n  markupTab,\n  markupContent,\n  resultsTab,\n  resultsContent\n} from './domcache';\nimport { toggleClasses } from './domhelpers';\n\n// markup by default\nlet currentTab = markupTab;\nlet currentContent = markupContent;\n\n// set up tab state when JS loads\nconst setInitialState = ((tabs, content) => {\n  tabsList.setAttribute('role', 'tablist');\n\n  tabs.forEach((tab, i) => {\n    const index = i;\n\n    tab.parentNode.setAttribute('role', 'presentation');\n    tab.setAttribute('role', 'tab');\n\n    content[i].setAttribute('role', 'tabpanel');\n    content[i].setAttribute('aria-labelledby', tabs[i].id);\n\n    if (i === 0) {\n      tab.classList.add('active');\n      tab.setAttribute('aria-selected', 'true');\n      content[0].classList.add('active');\n    } else {\n      tab.setAttribute('tabindex', '-1');\n      content[i].hidden = true;\n    }\n\n    tab.addEventListener('click', e => {\n      const hash = e.currentTarget.id;\n\n      e.preventDefault();\n\n      if (currentTab !== e.currentTarget) {\n        switchTab(e.currentTarget, content[index]);\n        window.location.hash = hash;\n      }\n    });\n\n    tab.addEventListener('keydown', e => {\n      if (e.key === 'ArrowRight' && index === 0) {\n        switchTab(tabs[1], content[1]);\n      } else if (e.key === 'ArrowLeft' && index === 1) {\n        switchTab(tabs[0], content[0]);\n      } else if (e.key === 'ArrowDown') {\n        content[index].setAttribute('tabindex', '0');\n        content[index].focus();\n      }\n    });\n  });\n})([markupTab, resultsTab], [markupContent, resultsContent]);\n\nconst toggleTabA11y = (newTab, newContent) => {\n  currentTab.setAttribute('tabindex', '-1');\n  currentTab.removeAttribute('aria-selected');\n  currentContent.hidden = true;\n  currentContent.hasAttribute('tabindex') &&\n    currentContent.removeAttribute('tabindex');\n\n  newContent.removeAttribute('hidden');\n  newTab.removeAttribute('tabindex');\n  newTab.setAttribute('aria-selected', 'true');\n  newTab.focus();\n};\n\nconst switchTab = (...args) => {\n  const [newTab, newContent] = args;\n  toggleClasses([newTab, newContent, currentTab, currentContent], 'active');\n  toggleTabA11y(newTab, newContent);\n\n  currentTab = newTab;\n  currentContent = newContent;\n};\n\nexport default switchTab;\n","// import upload input from dom and textarea\nimport { textArea, fileNameOutput } from './domcache';\n\nconst readFile = (file, callback) => {\n  const reader = new FileReader();\n  reader.onload = callback;\n  reader.readAsText(file, 'UTF-8');\n};\n\nconst setTextareaContent = ({ target }, name) => {\n  textArea.value = target.result;\n  fileNameOutput.innerHTML = `<span class=\"highlight\">${name}</span> uploaded`;\n};\n\nconst handleFileInput = file => {\n  readFile(file, e => {\n    setTextareaContent(e, file.name);\n  });\n};\n\nexport default handleFileInput;\n","import getHarvest from './harvester';\nimport * as els from './domcache';\nimport switchTab from './tabs';\nimport handleFileInput from './fileupload';\nimport '../scss/main.scss';\n\nconst createEmailMarkup = emailMatches =>\n  emailMatches.map(email => `<li class=\"match\">${email}</li>`).join('');\n\nconst createLinkMarkup = linkMatches =>\n  linkMatches\n    .map(\n      link =>\n        `<li class=\"match\"><dl>\n          <dt>Text</dt><dd>${link.text}</dd>\n          <dt>URL</dt><dd>${link.url}</dd>\n          </dl></li>`\n    )\n    .join('');\n\nconst displayMatches = ({ email, links }) => {\n  if (email.length) {\n    els.emailsOutput.innerHTML = createEmailMarkup(email);\n  }\n\n  if (links.length) {\n    els.linksOutput.innerHTML = createLinkMarkup(links);\n  }\n};\n\nconst resetForm = () => {\n  const msgs = createHeaderMsgs(true);\n\n  els.linksOutput.innerHTML = '';\n  els.emailsOutput.innerHTML = '';\n  els.fileNameOutput.textContent = 'no file selected';\n\n  updateResultsHeaders(msgs);\n};\n\nwindow.addEventListener('hashchange', e => {\n  const hash = window.location.hash;\n\n  if (hash.includes('markup')) {\n    switchTab(els.markupTab, els.markupContent);\n  } else if (hash.includes('results')) {\n    switchTab(els.resultsTab, els.resultsContent);\n  }\n});\n\nels.uploadBtn.addEventListener('click', () => {\n  els.uploadInput.click();\n});\n\nels.uploadInput.addEventListener('change', e => {\n  handleFileInput(e.target.files[0]);\n});\n\nconst createHeaderMsgs = (reset, emails = 0, links = 0) => {\n  const msgs = { email: '', link: '', noMk: '' };\n\n  if (reset) {\n    msgs.noMk = 'No Markup to Harvest';\n  } else {\n    msgs.email = `${emails} Harvested E-mail Link${emails !== 1 ? 's' : ''}`;\n    msgs.link = `${links} Harvested External Link${links !== 1 ? 's' : ''}`;\n  }\n\n  return msgs;\n};\n\nconst updateResultsHeaders = ({ email, link, noMk }) => {\n  els.emailHeader.textContent = email;\n  els.linksHeader.textContent = link;\n  els.noMarkupHeader.textContent = noMk;\n\n  if (noMk === '') {\n    els.noMarkupMsg.innerHTML = '';\n  } else {\n    els.noMarkupMsg.innerHTML = `To harvest markup for external links and linked e-mail addresses, go to the\n        <a href=\"#markup-tab\">markup tab</a> and upload a file or paste markup in the text field.`;\n  }\n};\n\nels.form.addEventListener('submit', e => {\n  e.preventDefault();\n\n  const harvest = getHarvest(els.textArea.value.trim());\n  const headerMsgs = createHeaderMsgs(\n    false,\n    harvest.email.length,\n    harvest.links.length\n  );\n\n  updateResultsHeaders(headerMsgs);\n  displayMatches(harvest);\n\n  switchTab(els.resultsTab, els.resultsContent);\n});\n\nels.form.addEventListener('reset', resetForm);\n"]}